# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from server.models.base_model_ import Model
from server import util


class Error(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, status: int=None, error: str=None, message: str=None, description: str=None, href: str=None):  # noqa: E501
        """Error - a model defined in Swagger

        :param status: The status of this Error.  # noqa: E501
        :type status: int
        :param error: The error of this Error.  # noqa: E501
        :type error: str
        :param message: The message of this Error.  # noqa: E501
        :type message: str
        :param description: The description of this Error.  # noqa: E501
        :type description: str
        :param href: The href of this Error.  # noqa: E501
        :type href: str
        """
        self.swagger_types = {
            'status': int,
            'error': str,
            'message': str,
            'description': str,
            'href': str
        }

        self.attribute_map = {
            'status': 'status',
            'error': 'error',
            'message': 'message',
            'description': 'description',
            'href': 'href'
        }
        self._status = status
        self._error = error
        self._message = message
        self._description = description
        self._href = href

    @classmethod
    def from_dict(cls, dikt) -> 'Error':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Error of this Error.  # noqa: E501
        :rtype: Error
        """
        return util.deserialize_model(dikt, cls)

    @property
    def status(self) -> int:
        """Gets the status of this Error.

        The HTTP status of the error  # noqa: E501

        :return: The status of this Error.
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status: int):
        """Sets the status of this Error.

        The HTTP status of the error  # noqa: E501

        :param status: The status of this Error.
        :type status: int
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def error(self) -> str:
        """Gets the error of this Error.

        The error code of the occurred exception  # noqa: E501

        :return: The error of this Error.
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error: str):
        """Sets the error of this Error.

        The error code of the occurred exception  # noqa: E501

        :param error: The error of this Error.
        :type error: str
        """
        if error is None:
            raise ValueError("Invalid value for `error`, must not be `None`")  # noqa: E501

        self._error = error

    @property
    def message(self) -> str:
        """Gets the message of this Error.

        The message of the error - what went wrong  # noqa: E501

        :return: The message of this Error.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message: str):
        """Sets the message of this Error.

        The message of the error - what went wrong  # noqa: E501

        :param message: The message of this Error.
        :type message: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")  # noqa: E501

        self._message = message

    @property
    def description(self) -> str:
        """Gets the description of this Error.

        A description how to fix the error or more details  # noqa: E501

        :return: The description of this Error.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this Error.

        A description how to fix the error or more details  # noqa: E501

        :param description: The description of this Error.
        :type description: str
        """

        self._description = description

    @property
    def href(self) -> str:
        """Gets the href of this Error.

        A link to further information about the error and how to fix  # noqa: E501

        :return: The href of this Error.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href: str):
        """Sets the href of this Error.

        A link to further information about the error and how to fix  # noqa: E501

        :param href: The href of this Error.
        :type href: str
        """

        self._href = href
